[tool.poetry]
name = "incidents-task"
version = "0.1.0"
description = "Cистема сбора инцидентов. Тестовое задание в компанию «B»"
authors = ["entity27 <mailforinform@mail.ru>"]
license = "AGPL-3.0"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
flask = "^3.1.0"
flask-restful = "^0.3.10"
flask-sqlalchemy = "^3.1.1"
alembic = "^1.15.2"
pydantic-settings = "^2.9.1"
psycopg2 = "^2.9.10"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.2.0"
ruff = "^0.11.5"
mypy = "^1.15.0"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest]
pythonpath = "."

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]
disallow_subclassing_any = false
disable_error_code = [
    "import-untyped"
]

[tool.ruff]
target-version = "py311"
exclude = ["alembic"]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
